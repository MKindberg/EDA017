package life;

public class Life {
	private LifeBoard lb;

	public Life(LifeBoard lb) {
		this.lb = lb;
	}

	public void newGeneration() {
		lb.increaseGeneration();
		boolean board_copy[][] = new boolean[lb.getRows()][lb.getCols()];
		for (int row = 0; row < lb.getRows(); ++row)
			for (int col = 0; col < lb.getCols(); ++col) {
				if (lb.get(row, col) && (neighbours(row, col) == 2 || neighbours(row, col) == 3))
					board_copy[row][col] = true;
				if (lb.get(row, col) && (neighbours(row, col) >= 4 || neighbours(row, col) <= 1))
					board_copy[row][col] = false;
				if (neighbours(row, col) == 3)
					board_copy[row][col] = true;
			}
		for (int row = 0; row < lb.getRows(); ++row)
			for (int col = 0; col < lb.getCols(); ++col)
				lb.put(row, col, board_copy[row][col]);

	}

	public void flip(int row, int col) {
		lb.put(row, col, !lb.get(row, col));
	}

	private int neighbours(int row, int col) {
		int n = 0;
		for (int r = -1; r <= 1; r++)
			for (int c = -1; c <= 1; c++)
				if (lb.get(row + r, col + c))
					n++;
		if (lb.get(row, col))
			n--;
		return n;
	}
}
